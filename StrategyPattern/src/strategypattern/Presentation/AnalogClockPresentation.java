/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package strategypattern.Presentation;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;

/**
 *
 * @author rebirth
 */
public class AnalogClockPresentation extends javax.swing.JPanel {
    
    private int hours, minutes, seconds;
    
    /**
     * Creates new form AnalogClockPresentation
     */
    public AnalogClockPresentation() {
        initComponents();
        setTime("00:00:00");
    }
    
    public void setTime(String time) {
        String[] times = time.split(":");
        this.hours = Integer.parseInt(times[0]);
        this.minutes = Integer.parseInt(times[1]);
        this.seconds = Integer.parseInt(times[2]);
        repaint();
    }
    
    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2 = (Graphics2D) g;
        RenderingHints rh = new RenderingHints(
                RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_ON 
        );
        g2.setRenderingHints(rh);
        
        // clock radius
        int radius = this.getHeight() / 2;
        
        // define positions
        int clockMiddleX = this.getWidth() / 2;
        int clockMiddleY = this.getHeight() / 2;
        int clockStartX = clockMiddleX - (radius / 2);
        int clockStartY = clockMiddleY - (radius / 2);
        
        g.drawOval(clockStartX, clockStartY, radius, radius);
        
        // draw hour pointer
        int[] position = calculatePointer(clockMiddleX, clockMiddleY, this.hours, 12, (radius/6));
        g2.setStroke(new BasicStroke(4, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND));
        g.drawLine(position[0], position[1], position[2], position[3]);
        
        // draw minute pointer
        position = calculatePointer(clockMiddleX, clockMiddleY, this.minutes, 60, (radius/3));
        g2.setStroke(new BasicStroke(2, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND));
        g.drawLine(position[0], position[1], position[2], position[3]);
        
        // draw second pointer
        position = calculatePointer(clockMiddleX, clockMiddleY, this.seconds, 60, (radius/2) - 5);
        g2.setStroke(new BasicStroke(1, BasicStroke.CAP_ROUND, BasicStroke.JOIN_ROUND));
        g2.setColor(Color.RED);
        g.drawLine(position[0], position[1], position[2], position[3]);
        
        setVisible(true);
    }
    
    public int[] calculatePointer(int xStart, int yStart, int value, int max, int length) {
        double degree = ((double)value/(double)max) * Math.PI * 2;
        
        int xPos = xStart + (int) ( Math.cos(degree - (Math.PI / 2)) * length);
        int yPos = yStart + (int) ( Math.sin(degree - (Math.PI / 2)) * length);
        int[] positions = {xStart, yStart, xPos, yPos};
        return positions;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
